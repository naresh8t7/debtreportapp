// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
        types "debtreportapp/internal/types"
        http "net/http"
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
)

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
        ctrl     *gomock.Controller
        recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
        mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
        mock := &MockHTTPClient{ctrl: ctrl}
        mock.recorder = &MockHTTPClientMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
        return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClient) Do(req *http.Request) (*http.Response, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Do", req)
        ret0, _ := ret[0].(*http.Response)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(req interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), req)
}

// MockDebtsAPI is a mock of DebtsAPI interface.
type MockDebtsAPI struct {
        ctrl     *gomock.Controller
        recorder *MockDebtsAPIMockRecorder
}

// MockDebtsAPIMockRecorder is the mock recorder for MockDebtsAPI.
type MockDebtsAPIMockRecorder struct {
        mock *MockDebtsAPI
}

// NewMockDebtsAPI creates a new mock instance.
func NewMockDebtsAPI(ctrl *gomock.Controller) *MockDebtsAPI {
        mock := &MockDebtsAPI{ctrl: ctrl}
        mock.recorder = &MockDebtsAPIMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDebtsAPI) EXPECT() *MockDebtsAPIMockRecorder {
        return m.recorder
}

// GetDebts mocks base method.
func (m *MockDebtsAPI) GetDebts() ([]types.Debt, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetDebts")
        ret0, _ := ret[0].([]types.Debt)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetDebts indicates an expected call of GetDebts.
func (mr *MockDebtsAPIMockRecorder) GetDebts() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebts", reflect.TypeOf((*MockDebtsAPI)(nil).GetDebts))
}

// GetPaymentPlans mocks base method.
func (m *MockDebtsAPI) GetPaymentPlans() ([]types.PaymentPlans, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetPaymentPlans")
        ret0, _ := ret[0].([]types.PaymentPlans)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetPaymentPlans indicates an expected call of GetPaymentPlans.
func (mr *MockDebtsAPIMockRecorder) GetPaymentPlans() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentPlans", reflect.TypeOf((*MockDebtsAPI)(nil).GetPaymentPlans))
}

// GetPayments mocks base method.
func (m *MockDebtsAPI) GetPayments() ([]types.Payment, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetPayments")
        ret0, _ := ret[0].([]types.Payment)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetPayments indicates an expected call of GetPayments.
func (mr *MockDebtsAPIMockRecorder) GetPayments() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayments", reflect.TypeOf((*MockDebtsAPI)(nil).GetPayments))
}